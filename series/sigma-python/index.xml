<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sigma Python on tobiwan.dev</title><link>https://tobiwandev.github.io/series/sigma-python/</link><description>Recent content in Sigma Python on tobiwan.dev</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Â© 2024 Piotr Tobiasz</copyright><lastBuildDate>Thu, 13 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://tobiwandev.github.io/series/sigma-python/index.xml" rel="self" type="application/rss+xml"/><item><title>Sigma Python #3: Descriptors</title><link>https://tobiwandev.github.io/articles/sigmapython03/</link><pubDate>Thu, 13 Jul 2023 00:00:00 +0000</pubDate><guid>https://tobiwandev.github.io/articles/sigmapython03/</guid><description>Python offers a range of powerful features for object-oriented programming, including descriptors. These enable you to define how class attribute modification and access occur, making it useful for enforcing value constraints, implementing computed properties, and customizing attribute access.
This article covers the fundamentals of descriptors and provides guidance on how to implement them in your Python code. It addresses the following questions:
what is the definition of a descriptor how to create a descriptor from scratch how the descriptors actually work what can be built using descriptors Descriptors may sound unfamiliar to you, but they are widely used in popular packages such as Django and SQLAlchemy.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://tobiwandev.github.io/articles/sigmapython03/featured.png"/></item><item><title>Sigma Python #2: Generators</title><link>https://tobiwandev.github.io/articles/sigmapython02/</link><pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate><guid>https://tobiwandev.github.io/articles/sigmapython02/</guid><description>Python generators are a crucial feature with multiple uses, from lazy iteration to continuous data streaming. They are heavily adopted in popular packages such as FastAPI, SQLAlchemy, pytest, and others, highlighting their power and the importance of understanding how they work.
This article provides answers to the following questions about generators:
What are they exactly? How do they work? What are generator expressions and subgenerators? What are some common use cases for generators?</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://tobiwandev.github.io/articles/sigmapython02/featured.png"/></item><item><title>Sigma Python #1: Decorators</title><link>https://tobiwandev.github.io/articles/sigmapython01/</link><pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate><guid>https://tobiwandev.github.io/articles/sigmapython01/</guid><description>One of the most interesting and useful features of Python are decorators, which are callable objects that modify the behavior of other pieces of code without any additional changes. Decorators are a fundamental concept in Python, and they are used extensively in the language&amp;rsquo;s standard library, as well as in third-party libraries and frameworks.
Some of the most common usages of decorators include:
logging timing caching error handling Decorators are also a great way to create reusable code since they can be applied to multiple functions.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://tobiwandev.github.io/articles/sigmapython01/featured.png"/></item></channel></rss>