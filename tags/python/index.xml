<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on tobiwan.dev</title><link>https://ttobiwan.github.io/tags/python/</link><description>Recent content in Python on tobiwan.dev</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2024 Piotr Tobiasz</copyright><lastBuildDate>Wed, 26 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ttobiwan.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Gopher Pythonista #1: From Python to Go</title><link>https://ttobiwan.github.io/articles/gopher01/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://ttobiwan.github.io/articles/gopher01/</guid><description>Throughout my career, I have primarily focused on developing backend systems using Python. Despite dabbling in front-end work, I always found myself gravitating back toward API development. In order to expand my skill set, I have experimented with writing backend applications using different programming languages such as JavaScript/Typescript and Rust. I have tested various technologies and frameworks, some of which I found more enjoyable than others. Nonetheless, there remains one language that I have yet to explore: Go.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://ttobiwan.github.io/articles/gopher01/featured.png"/></item><item><title>Sigma Python #3: Descriptors</title><link>https://ttobiwan.github.io/articles/sigmapython03/</link><pubDate>Thu, 13 Jul 2023 00:00:00 +0000</pubDate><guid>https://ttobiwan.github.io/articles/sigmapython03/</guid><description>Python offers a range of powerful features for object-oriented programming, including descriptors. These enable you to define how class attribute modification and access occur, making it useful for enforcing value constraints, implementing computed properties, and customizing attribute access.
This article covers the fundamentals of descriptors and provides guidance on how to implement them in your Python code. It addresses the following questions:
what is the definition of a descriptor how to create a descriptor from scratch how the descriptors actually work what can be built using descriptors Descriptors may sound unfamiliar to you, but they are widely used in popular packages such as Django and SQLAlchemy.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://ttobiwan.github.io/articles/sigmapython03/featured.png"/></item><item><title>Patterns and Practices for using SQLAlchemy 2.0 with FastAPI</title><link>https://ttobiwan.github.io/articles/fastapi-sqlalchemy/</link><pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate><guid>https://ttobiwan.github.io/articles/fastapi-sqlalchemy/</guid><description>While Django and Flask remain the first choices for many Python engineers, FastAPI has already been recognized as an undeniably reliable pick. It is a highly flexible, well-optimized, structured framework that gives the developer endless possibilities for building backend applications.
Working with databases is an essential aspect of most backend applications. As a result, the ORM plays a critical role in the backend code. However, unlike Django, FastAPI does not have an ORM built-in.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://ttobiwan.github.io/articles/fastapi-sqlalchemy/featured.png"/></item><item><title>Sigma Python #2: Generators</title><link>https://ttobiwan.github.io/articles/sigmapython02/</link><pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate><guid>https://ttobiwan.github.io/articles/sigmapython02/</guid><description>Python generators are a crucial feature with multiple uses, from lazy iteration to continuous data streaming. They are heavily adopted in popular packages such as FastAPI, SQLAlchemy, pytest, and others, highlighting their power and the importance of understanding how they work.
This article provides answers to the following questions about generators:
What are they exactly? How do they work? What are generator expressions and subgenerators? What are some common use cases for generators?</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://ttobiwan.github.io/articles/sigmapython02/featured.png"/></item><item><title>Debugging Python Apps in VSCode</title><link>https://ttobiwan.github.io/articles/debug-vscode/</link><pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate><guid>https://ttobiwan.github.io/articles/debug-vscode/</guid><description>Debugging is an essential part of software development. It can be a time-consuming and frustrating process. There is nothing wrong with putting print statements inside the code to check something quickly. If it works for you in most cases, then why should you worry about overcomplicating this process? However, in more complex scenarios, using just a logging mechanism may be insufficient or even unfeasible.
This article covers the usage of Visual Studio Code debugging tools for Python applications.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://ttobiwan.github.io/articles/debug-vscode/featured.png"/></item><item><title>Sigma Python #1: Decorators</title><link>https://ttobiwan.github.io/articles/sigmapython01/</link><pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate><guid>https://ttobiwan.github.io/articles/sigmapython01/</guid><description>One of the most interesting and useful features of Python are decorators, which are callable objects that modify the behavior of other pieces of code without any additional changes. Decorators are a fundamental concept in Python, and they are used extensively in the language&amp;rsquo;s standard library, as well as in third-party libraries and frameworks.
Some of the most common usages of decorators include:
logging timing caching error handling Decorators are also a great way to create reusable code since they can be applied to multiple functions.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://ttobiwan.github.io/articles/sigmapython01/featured.png"/></item><item><title>Using Textual to Build a ChatGPT TUI App</title><link>https://ttobiwan.github.io/articles/textual-chat/</link><pubDate>Wed, 15 Mar 2023 00:00:00 +0000</pubDate><guid>https://ttobiwan.github.io/articles/textual-chat/</guid><description>TUI stands for &amp;ldquo;text user interface&amp;rdquo;. It refers to a type of user interface that relies primarily on text and symbols to interact with users, rather than visual elements like icons and images. TUI applications typically run in a command-line interface (CLI) environment, which is a type of interface where users interact with a computer by typing commands into a text-based interface. TUI applications have been around for a long time and despite their seemingly archaic design, they have certain advantages over graphical user interface (GUI) applications.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://ttobiwan.github.io/articles/textual-chat/featured.png"/></item><item><title>5 Python Must-Know Packages</title><link>https://ttobiwan.github.io/articles/python-packages/</link><pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate><guid>https://ttobiwan.github.io/articles/python-packages/</guid><description>Saying &amp;ldquo;you must know it&amp;rdquo; in pretty much any field of science can be quite contentious. There is no exception in software development. You may frequently see tweets or posts stating things like &amp;ldquo;you must learn Blockchain if you don&amp;rsquo;t want to be left behind&amp;rdquo; or &amp;ldquo;you must know Kubernetes because it is so popular right now.&amp;rdquo; Spoiler: You don&amp;rsquo;t. However, if you want to be an expert in your field, there might be some topics that are almost universal or are used so frequently that it can be challenging without at least a fundamental understanding.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://ttobiwan.github.io/articles/python-packages/featured.png"/></item></channel></rss>